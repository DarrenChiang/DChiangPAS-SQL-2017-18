8/28/2017
Over the last few classes, we went over designing database structures through tables
in Excel/Google Sheets. I realized the disadvantages of using such methods. A fully-
fledged database saves both the data attributes and necessary algorithms for data
operations and querying. Excel, when presenting data in different formats for different
purposes, has many redundancies and requires a lot of manual work.

8/31/2017
Today I learned about specific attributes for data in databases.
Attributes: properties of data
Simple vs Composite (multiple related simple attributes)
Single-Valued vs Multi-Valued
Stored vs Derived
Complex: collection of attributes to create an abstract attribute (usually derived)
Null Value: purposeful empty value (Null, 99, -1...)
Entity
Entity Type
Entity Set
All entities must have a key attribute: ID.
Value Sets (Domain): limits of an entity, ex: 0-99
Data Types

9/4/2017

9/7/2017

9/11/2017

9/15/2017
We started playing a game designed by Mr. Johnson's friend where we recieved random
cards (building blocks) to build a database system. We recieved a random client, started
with an entity and single relationship, and recieved sets of random cards (attributes,
entities, relationships, extenders, etc.). The scoring system was based on how many cards
we were able to use while still relevantly defining the database system.

9/18/2017
We learned about organizing the ER model into more a progam-like structure that bears
similarities to objects and functions in traditional programming languages. Entities and
relationships hold attributes in parenthesis and can also hold foreign attributes (other 
entities' IDs). One exception from the ER diagram concerns the multivalued attribute.
Because the parenthesis-parameter format is already like a multivalued attribute, the
latter deserves its own line/table/category (like entities or relationships) while holding its
own ID and its owner's ID.
We also continued on our database modeling game and played a little Sushi Go at the
end of class.