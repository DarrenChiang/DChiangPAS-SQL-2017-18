8/28/2017
Over the last few classes, we went over designing database structures through tables
in Excel/Google Sheets. I realized the disadvantages of using such methods. A fully-
fledged database saves both the data attributes and necessary algorithms for data
operations and querying. Excel, when presenting data in different formats for different
purposes, has many redundancies and requires a lot of manual work.

8/31/2017
Today I learned about specific attributes for data in databases.
Attributes: properties of data
Simple vs Composite (multiple related simple attributes)
Single-Valued vs Multi-Valued
Stored vs Derived
Complex: collection of attributes to create an abstract attribute (usually derived)
Null Value: purposeful empty value (Null, 99, -1...)
Entity
Entity Type
Entity Set
All entities must have a key attribute: ID.
Value Sets (Domain): limits of an entity, ex: 0-99
Data Types

9/4/2017
We practiced working with the ER model on a hotel database. We struggled with organizing
the entities as we (I) didn't exactly understand the structure of a hotel management system.
Mr. Sawyer came in class today and provided some information on hotel accounting and the
front desk. The overall by the end of the class felt unsatisfactory.

9/7/2017
We reviewed and clarified the definition and usage of weak entities and identifying relationships
(as such was the focus of the previous homework). The class played a vocabulary game for
the database terms, but the usefulness of what ensued is debatable.

9/11/2017
We played jeapardy in class to further strengthen our grasp on database terms and concepts.
Vocabulary questions happened to be simple while example questions that asked us to build a 
database were more complex. I fumbled at some of the questions regarding the history of
databases. All teams maintained a relatively competitive score by the end of class.

9/15/2017
We started playing a game designed by Mr. Johnson's friend where we recieved random
cards (building blocks) to build a database system. We recieved a random client, started
with an entity and single relationship, and recieved sets of random cards (attributes,
entities, relationships, extenders, etc.). The scoring system was based on how many cards
we were able to use while still relevantly defining the database system.

9/18/2017
We learned about organizing the ER model into more a progam-like structure that bears
similarities to objects and functions in traditional programming languages. Entities and
relationships hold attributes in parenthesis and can also hold foreign attributes (other 
entities' IDs). One exception from the ER diagram concerns the multivalued attribute.
Because the parenthesis-parameter format is already like a multivalued attribute, the
latter deserves its own line/table/category (like entities or relationships) while holding its
own ID and its owner's ID.
We also continued on our database modeling game and played a little Sushi Go at the
end of class.

9/21/2017
Today, we were taught about "directional" relationships. "Is a" relationship clarifies an entity
to something else, which can be a generalization or specialization. Trucks and SUVs can be
generalized into a car while the inverse is a specialization. Specialization usually goes from a
single entity to multiple branching entities. "Is a" relationships can be drawn as a perfect
circle or a triangle. Specialization can be a double line between relationships or an anchor-like
mark towards the specialized entities. "Is a" relationships are not to be used excessively. They
can easily be relegated to attributes if a database requires more attributes and "actual"
relationships. "Is a" is only necessary when the specialized entities share obvious types of
attributes while having exclusive ones. Both trucks and SUVs have wheels, but only trucks
should worry about load capacity while SUVs may care more about top speed. We tried mapping
out an ER diagram for a ship captain using all we learned from the past after struggling with a
discount system issue brought up by the STUCO store. Also, in cardinals, N = numeral while
M = maximum.

9/25/2017
We tried making relationship models with "is a"  relationships. We designated the purpose
and functionalities of a "client" and swapped "clients" with each other as a challenge. We then
had to design the models based on the specifications made by each other. I specified a
database for a radio host and had to design a database for a travel agent.

9/28/2017
Functional Dependencies: A + B => C (date of birth + current date = age)

Trivial: A => A (we can tell ID by looking at ID)
A + B => C + A, A is useless as a resultant.

Non-Trivial: A => B (new information/worthwhile)
ID can tell name/address. Address cannot tell name and vice versa.

Transitive: A => B, B => C, B =/> A (book => author => gender, but author =/> book reliably)
Therefore, A => C while B =/> A.

Multi-Valued: mA =>> mB

Normalized Table: reduced redundancies, linked (derived) attributes (less values to represent more)
1NF: No multi-values.
2NF: Everything ID'ed/No partial dependencies.
3NF: No transitives.

10/2/2017
We reviewed the various degrees of normalization. I'm starting to question how much of what I 
believe to be the normalization levels to actually be correct.
If an attribute derives another, it acts like an ID right? Do we logically go from one another, or is
it arbitrary?

10/5/2017
There was a pop quiz because Mr. Ting said that some student(s) plagarized. Problem is, I don't know
if it is me. I did not plagarize, but I fear that my answers may be unintentionally similar (20% minimum?).
It turns out that I don't remember the terms well, so I didn't get many points from the quiz.
Afterwards, the class reviewed normalization once again and we were told to turn a database (pizza?)
into BCNF form.

10/12/2017
We spent the entire class talking about Ch10 hw. It was dreadful. I hate normalization and fear what's to
come.

10/16/2017
Apparently, there are other factors to consider for normalization and denormalization. In big data analysis,
sometimes approximate data is used instead of actual data to protect the privacy of individuals in a survey.
The overall bell curve should remain similar. A denormalized table means that servers can perform 
operations easier because there are less tables to work with. A normalized table means that less errors
will occur.

10/19/2017
We used SQLfiddle! We did the basic stuff: creating tables, queries, etc...
Turns out that insert and append cannot be used in the querying section of SQLfiddle.

10/23/2017
More SQLfiddle! Now we use the relation schema of a restaurant featuring us as customers and fellow
volunteers from Python as employees. We did stuff like assigning keys, appending and inserting, and
other "challenges."

10/25/2017
More SQLfiddle with the same database! We focused on transitive queries. So it's like deriving information
from keys (SELECT's on top of SELECT's). More challenges too. Mr. Ting wants us to suffer from the "manual"
way of inserting information in not-so-normalized tables. He says that things will be much faster when we do
coding.

10/30/2017
We did more SQLfiddle. We ended the class with the challenge of doing a query from two tables.

11/2/2017
Mr. Ting was sick and couldn't speak much, so we spent the class doing DataCamp.

11/6/2017
Design
Functionality: must work
Usability: users must be able to use it, design to the user
Mechanics Dynamics Aesthetics (MDA): balance mechanics (functionality) with aesthetics (user perspective)
Simplicity: reduce redundency, shorten steps, make it idiot proof
Contrast: different things should look different (consider emphasis/functionality)
Repetition: similar things should look similar
Alignment: line things up (flow, aesthetics, direction, focus, CONSISTENCY)
Proximity: group similar things together, space different things apart

11/9/2017
For today's SQLfiddle challenge, I tried to systematically add data from one table to another, with new information
fitting all corresponding columns and new ID's properly generated. If I did not know how many employees there
are, then I would have to "loop" the process (to be learned).
Next, I did more DataCamp.

11/13/2017
We practiced joins in SQLfiddle and further exercises in DataCamp. I was fairly caught up in Datacamp.

11/16/2017
We specified the different types of joins with further practice. Venn Diagrams were used to compare and define the
different types of joins.

11/23/2017
With half the class gone, we played a number guessing game where we used the process of elimination and the most basic
probability to guess the number of cards. It was actually fun.

11/27/2017
We did more Datacamp exercises.

11/30/2017
This is first we work with LibreOffice. We learned that its package and contents are similar to things from Microsoft
Office. LibreOffice includes database files, docs, drawings, calcs, and such. I first tried installing the Windows
version in a zipped file provided by Mr. Ting, but it could not detect a JRE even after I installed a different one. I
verified that I already had one, but I had to do more testing at home.

12/4/2017
Chapter 6 was supposedly due today. It was hard, but I was somewhat miffed by the "extension" where we were able to ask
for answers during class. Makes me really ponder my sleep schedule and habits.

12/7/2017
First LibreOffice project or work. We had to make a simple database by copying stuff from an existing database we worked on.
I was able to fix the JRE issue by directly installing LibreOffice from their website, but I encountered a new issue. I could
not copy and paste data from a spreadsheet into my Libreoffice tables. I had to manually input data. We later had to work on
an actual database based on our restaurant project.

12/11/2017
At the end, I still could not copy and paste data onto LibreOffice tables. Luckily for me, there is not a lot of data in
my restaurant database. Apparently, it is important to specify table properties beforehand, as they cannot be changed after
setting relations or adding data. I learned this the hard way through autovaluing and the importance of formatting/setting
defaults later on.

12/14/2017
I realized that I had to start over and create new tables from scratch. I then tried out queries to generate data that may
be useful for restaurants, such as daily earnings. The design view (or the default) way to create queries was doable but not
intuitive. I liked SQL view more where I could apply what I learned from all the exercises from Datacamp, Codecademy, and
SQLfiddle.

12/18/2017
I had to try to deal with learning macros for somewhat complex operations, but it involved learning a new language. I am
slightly frustrated by the fact that I may not use any more of the SQL language itself at all.

12/20/2017
I decided that my database needed revising, so I started anew. Afterall, I forgot to optimize my database for practical use.

1/8/2018

1/11/2018

1/15/2018

1/18/2018

1/22/2018

1/25/2018

2/1/2018
I learned a bit about how Javascript integrates with HTML. I practiced some functions that allowed for direct interaction, such as
element.innerHTML and document.getElementById("id").
The <button> has onclick="function()" that can call a function in the <head> on action.

2/5/2018
Today I focused on learning JavaScript. It is a bit like Python with how flexible it is with declaring variables and objects. Its
objects are much like dictionaries from Python. I learned how to create methods and constructors for objects. Mr. Ting says that
the placement of JavaScript in html code is weird in many people's codes. It's probably best to place them in <head> when declaring
functions for later use (like buttons) and near respective elements in <body> for specific scripts (one time use?).

2/8/2018
Since the tables in the classroom were moved to the new campus, we had to made do with a make-shift table. We spent most of this
class outside at a restaurant learning about the process of creating a restaurant database with actual examples.

2/12/2018
Work day.

2/26/2018
Work day. Nothing notable in particular. Already finished the assignments. I should be capable of most things required within the
assignment.

3/1/2018
Today, we went out to eat at the restaurant Section 16 to make an inventory ER model for it. I think I ate too much. I took a simple
approach to the ER model. It had to keep inventory of all sorts of supplies while also being capable of handling employee information
and transactions.

3/12/2018
We took a mini-quiz where we had to answer 3 questions from a website. I struggled a lot with the most arbitrary, frustrating syntax and
limitations in Javascript where no other languages would have a problem.

3/15/2018 - 4/2/2018
Worked on sorting, cleaning, and checking the PAS Science Inventory.

4/19/2018
I searched up various ways of integrating PHP for the file infrastucture of the Science Inventory website.

4/23/2018
I downloaded and transitioned from Github to this FireZilla thing.

4/26/2018
I reviewed PHP and found online scripts for how to connect to an SQL database and query. There are syntax errors that I have yet to pinpoint.

4/30/2018
I relearned html forms to connect to PHP scripts to integrate the search function into the SQL query.

5/3/2018
I typed out some system for getting a variable and slotting into the query for defining the "WHERE" of the search.

5/7/2018
I do believe that I got the connection working. Testing meant that no error popped up while connecting. For some reason, the script isn't
returning results from the query. Either the SQL command has wrong syntax or the issue lies in the printing logic.

5/10/2018
Finally got a working script of querying for all items in the Science Inventory with the help of others. I managed to get it displayed on
a blank page. In order to properly format it, we divided up the data to put in pre-existing tables created through html. Shaun integrated
the search function through forms to pass data for querying. He got the Inventory website functional from there.

5/14/2018
I was taking an AP test during this class.

5/16/2018
I was taking an AP test during this class.

5/21/2018
We learned about some basic "rules" of design and "do's and don't's" of coloring. Basically, use what other templates. Never more than
six colors. Never use 255 colors (way too bright/jarring) for background. Don't use pure black either. Contrasting is impossible and ugly 
when these are used. Light should always goes from top to down.
Reminder of FU KISS CRAP:
reduce/keep simple/stupid-proof/functional

5/24/2018
Took a 20 question test based off the actual license test.
